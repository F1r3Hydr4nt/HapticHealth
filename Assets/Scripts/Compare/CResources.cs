//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using Vcl.Utilities;

namespace Compare.Utilities
{

	#region Properties

	/// <summary>
	/// A class that contains important methods and structure for the comparison module.
	/// </summary>
	public class Properties
	{

		#region Activity

		#region Static Converters

		/// <summary>
		/// Converts an Activity enum to string.
		/// </summary>
		/// <returns>The activity in a string format.</returns>
		/// <param name="action">Action.</param>
		public static string ActivityToString(Activity action)
		{
			switch (action)
			{
			case Activity.HB_RHUS:
				return CResources.HB_RHUS;
			case Activity.HB_RHV:
				return CResources.HB_RHV;
			case Activity.HB_RHDS:
				return CResources.HB_RHDS;
			case Activity.HB_LHSS:
				return CResources.HB_LHSS;
			case Activity.P_S:
				return CResources.P_S;
			case Activity.P_SASS:
				return CResources.P_SASS;
			case Activity.J_BHS:
				return CResources.JA_RHBS;
			case Activity.J_SAS:
				return CResources.JA_RHSS;
			case Activity.GF_PK:
				return CResources.GF_PK;
			case Activity.H_SFTH:
				return CResources.H_SFTH;
			case Activity.DEFAULT:
				return "default";
			default:
				return action.ToString();
			}
		}

		/// <summary>
		/// Converts a string to an Activity. If there is no match between the string and an Activity
		/// return the Activity.DEFAULT
		/// </summary>
		/// <returns>The extrated Activity.</returns>
		/// <param name="action_name">The string to be converted.</param>
		public static Activity ActivityFromString(string action_name)
		{
			action_name = action_name.Trim();
			if (action_name == CResources.HB_RHUS)
				return Activity.HB_RHUS;
			else if (action_name == CResources.HB_RHV)
				return Activity.HB_RHV;
			else if (action_name == CResources.HB_RHDS)
				return Activity.HB_RHDS;
			else if (action_name == CResources.HB_LHSS)
				return Activity.HB_LHSS;
			else if (action_name == CResources.P_S)
				return Activity.P_S;
			else if (action_name == CResources.P_SASS)
				return Activity.P_SASS;
			else if (action_name == CResources.JA_RHBS)
				return Activity.J_BHS;
			else if (action_name == CResources.JA_RHSS)
				return Activity.J_SAS;
			else if (action_name == CResources.GF_PK)
				return Activity.GF_PK;
			else if (action_name == CResources.H_SFTH)
				return Activity.H_SFTH;
			else
				return Activity.DEFAULT;
		}

		#endregion

		#region Enum

		public enum Activity
		{
			/// <summary>
			/// The handball's  right-handed underarm shot activity.
			/// </summary>
			HB_RHUS,
			/// <summary>
			/// The handball's right-handed volley activity.
			/// </summary>
			HB_RHV,
			/// <summary>
			/// The handball's right-handed drop shot activity.
			/// </summary>
			HB_RHDS,
			/// <summary>
			/// The handball's left-handed slice shot activity.
			/// </summary>
			HB_LHSS,
			
			/// <summary>
			/// The pala's serve activity.
			/// </summary>
			P_S,
			/// <summary>
			/// The pala's straight-arm side shot activity.
			/// </summary>
			P_SASS,
			
			/// <summary>
			/// The jai alai's right-handed backhand shot activity.
			/// </summary>
			J_BHS,
			/// <summary>
			/// The jai alai's right-handed side-arm shot activity.
			/// </summary>
			J_SAS,
			
			/// <summary>
			/// The gaelic football's punt kick activity.
			/// </summary>
			GF_PK,
			
			/// <summary>
			/// The hurling's strike from the hand activity.
			/// </summary>
			H_SFTH,
			
			/// <summary>
			/// The default activity.
			/// </summary>
			DEFAULT
		};

		#endregion

		#endregion

		#region Animation Data

		/// <summary>
		/// Converts an Animation_data object to an array of Vcl.Utilities.IHumanoid.
		/// </summary>
		/// <param name="data">The animation data.</param>
		/// <param name="hums">The Vcl.Utilities.IHumanoid array.</param>
		public static void From_animation_data(ref Animation_data data, out IHumanoid[] hums)
		{
			hums = new IHumanoid[data.getLenght()];
			for (int i = 0; i < data.getLenght(); i++)
			{
				hums[i] = From_HBP(data.name, data.GetFrame(i), i);
				hums[i].SetInfo("frameNumber", i.ToString());
				hums[i].SetInfo("timestamp", (i * 30).ToString());
			}
		}

		/// <summary>
		/// Put the data of the array of Vcl.Utilities.IHumanoid to the Animation_data data and returns it using
		/// the variable new_data.
		/// </summary>
		/// <param name="hums">The array of IHumanoids</param>
		/// <param name="data">The input animation data.</param>
		/// <param name="new_data">The output animation data.</param>
		public static void To_animation_data(ref IHumanoid[] hums, ref Animation_data data, out Animation_data new_data)
		{
			new_data = data;
			new_data.Reset();
			new_data.name = hums[0].Name;
			foreach (var hum in hums)
				new_data.AddFrame(new Kinect2.IO.SkeletonFrame(
					int.Parse(hum.GetInfo("frameNumber")),
					new Kinect2.IO.Skeleton[] { To_HBP(hum) },
					new float[] {0, 0, 0, 0},
					long.Parse(hum.GetInfo("timestamp"))
				));
		}

		#endregion

		#region Skeletons

		/// <summary>
		/// Converts an HBP.SkeletonBone array to Vcl.Utilities.IHumanoid
		/// </summary>
		/// <returns>The humanoid.</returns>
		/// <param name="humanoid_name">The selected name of the humanoid.</param>
		/// <param name="bones">The HBP.Skeleton bones.</param>
		/// <param name="frameNumber">The number of the frame.</param>
		public static IHumanoid From_HBP(string humanoid_name, Kinect2.IO.Skeleton bones, int frameNumber)
		{
			var hum = new K2Skeleton(humanoid_name, new string[]
			                         {
				string.Format("version={0}", "1.2"),
				string.Format("frameNumber={0}", frameNumber),
				string.Format("timestamp={0}", (frameNumber * 32).ToString("X11")),
				string.Format("userCount={0}", 1),
				string.Format("userID={0}", bones.ID),
				string.Format("state={0}", bones.State)
			});

			for (int i = 0; i < 25; i++)
			{
				hum[i].Center = new Vec3f(bones[i][1], bones[i][2], bones[i][3]);
				hum[i].Rotation = new Orientation(bones[i][4], bones[i][5], bones[i][6], bones[i][7]);
			}

			return hum;
		}

		/// <summary>
		/// Converts an IHumanoid to an array of HBP.SkeletonBones
		/// </summary>
		/// <returns>The srray of HBP.SkeletonBones</returns>
		/// <param name="hum">The humanoid.</param>
		public static Kinect2.IO.Skeleton To_HBP(IHumanoid hum)
		{
			Kinect2.IO.Skeleton bones = new Kinect2.IO.Skeleton(
				null,
				ulong.Parse(hum.GetInfo("userID")),
				null,
				int.Parse(hum.GetInfo("state"))
			);

			for (int i = 0; i < 25; i++)
			{
				bones[i][1] = hum[i].Center.X;
				bones[i][2] = hum[i].Center.Y;
				bones[i][3] = hum[i].Center.Z;
				bones[i][4] = hum[i].Rotation.X;
				bones[i][5] = hum[i].Rotation.Y;
				bones[i][6] = hum[i].Rotation.Z;
				bones[i][7] = hum[i].Rotation.W;
			}

			return bones;
		}

		#endregion

	}

	#endregion

	#region Resources

	/// <summary>
	/// A class that contains important information for the comparison module.
	/// </summary>
	public class CResources
	{
		/// <summary>
		/// The location of the Vcl.Comparison.Console.exe file.
		/// </summary>
        public const string EXECUTABLE_FILE_PATH = @"Data\Executables\comparison\Vcl.Comparison.Console.exe";
		/// <summary>
		/// The location of the activities database file.
		/// </summary>
		public const string REFERENCE_DATABASE_FILE_PATH = @"Data\Resources\compare\activities.skelextdb";
		/// <summary>
		/// The location of the activities weights file.
		/// </summary>
		public const string WEIGHTS_DATABASE_FILE_PATH = @"Data\Resources\compare\activities.wt";
		/// <summary>
		/// The location of a default example of recorded file.
		/// </summary>
		public const string DEFAULT_RECORDING_FILE_PATH = @"Data\Resources\compare\default.txt";
		/// <summary>
		/// The location of a default temp file for the recordings.
		/// </summary>
		public const string DEFAULT_SAVE_RECORDING_FILE_PATH = @"Data\Resources\compare\tmp.sklxt";

		// Handball
		
		/// <summary>
		/// The handball's right-handed underarm shot activity name.
		/// </summary>
		public const string HB_RHUS = "Handball - Right-handed underarm shot";
		/// <summary>
		/// The handball's right-handed volley activity name.
		/// </summary>
		public const string HB_RHV = "Handball - Right-handed volley";
		/// <summary>
		/// The handball's right-handed drop shot activity name.
		/// </summary>
		public const string HB_RHDS = "Handball - Right-handed drop shot";
		/// <summary>
		/// The handball's left-handed slice shot activity name.
		/// </summary>
		public const string HB_LHSS = "Handball - Left-handed slice shot";
		
		// Pala
		
		/// <summary>
		/// The pala's serve activity name.
		/// </summary>
		public const string P_S = "Pala - Serve";
		/// <summary>
		/// The pala's straight-arm side shot activity name.
		/// </summary>
		public const string P_SASS = "Pala - Straight-arm side shot";
		
		// Jai Alai
		
		/// <summary>
		/// The jai alai's right-handed backhand shot activity name.
		/// </summary>
		public const string JA_RHBS = "Jai Alai - Right-handed backhand shot";
		/// <summary>
		/// The jai alai's right-handed side-arm shot activity name.
		/// </summary>
		public const string JA_RHSS = "Jai Alai - Right-handed side-arm shot";
		
		// Gaelic Football
		
		/// <summary>
		/// The gaelic football's punt kick activity name.
		/// </summary>
		public const string GF_PK = "Gaelic Football - Punt Kick";
		
		// Hurling

		/// <summary>
		/// The hurling's strike from the hand activity name.
		/// </summary>
		public const string H_SFTH = "Hurling - Strike from the hand";
	}

	#endregion

	#region Enums

	public enum State
	{
		/// <summary>
		/// Comparator is in this state when the comparison process is running.
		/// </summary>
		START,
		/// <summary>
		/// Comparator is in this state when the comparison process is finished.
		/// </summary>
		DONE,
		/// <summary>
		/// Comparator is in this state when the comparison process draws the plots in PNG format.
		/// </summary>
		DRAW_PLOTS,
		/// <summary>
		/// Comparator is in this state when it is not initialised.
		/// </summary>
		NONE
	};

	#endregion

}